#+TITLE: Gerbil-GSF: Compound File Binary Format

Essentially, my clients use a lot of Microsoft, whereas I stopped using their
products in '96. So, to display them, manipulate them, or even know what they
are, a lexical structuring library is a nice thing to have.


* Installation

** Make sure you have the dynamic library installed

   I use ~Nix~ to install things that are the same across servers and dists.

 #+begin_src shell

   nix search -u gsf
   # * nixpkgs.libgsf (libgsf)
   # GNOME's Structured File Library
   nix-env -iA nixpkgs.libgsf nixpkgs.pkgconfig

 #+end_src

We need to use ~pkg-config~ in order to tell us where things lie. Apparently
that's the way to do it these days.

 #+begin_src shell :session build
   export PKG_CONFIG_PATH=$(nix-shell -p libgsf pkgconfig mount libselinux libsepol \
                              --run 'echo $PKG_CONFIG_PATH')
   # >
   pkg-config --list-all |grep gsf
   # =>
   # libgsf-1  libgsf-1 - A library for reading and writing structured files (eg MS OLE and Zip)

   # >
   pkg-config --cflags --libs libgsf-1
   #-I/nix/store/xj47h03pfszv8nnl0alq5sxld8yjsjyb-libgsf-1.14.46-dev/include/libgsf-1 -I/nix/store/3kg0ihc8k0y7nh3r90hvdsn69k82w4pa-libxml2-2.9.9-dev/include/libxml2 -I/nix/store/fnyy7kwhg8bwxvi2xpjz7vndlz3a1a02-glib-2.62.2-dev/include -I/nix/store/fnyy7kwhg8bwxvi2xpjz7vndlz3a1a02-glib-2.62.2-dev/include/glib-2.0 -I/nix/store/r1qdhsvij69811ysvr0d4ijp1hc9bi94-glib-2.62.2/lib/glib-2.0/include -L/nix/store/82ir1iysw4havqhdpwnxikhmbwkj7g9a-libgsf-1.14.46/lib -L/nix/store/czkcspqabj4b4id26s0xbvd49lhc8l36-libxml2-2.9.9/lib -L/nix/store/r1qdhsvij69811ysvr0d4ijp1hc9bi94-glib-2.62.2/lib -lgsf-1 -lgobject-2.0 -lglib-2.0 -lxml2

 #+end_src

** Building this library
 #+begin_src shell :session  (if (get-buffer "build") (if (kill-buffer "build") (print "build") (print "build"))(print "build")) :results output
    echo "reset build session"; true;
 #+end_src

 #+begin_src shell :session build :results output :tangle ./build.sh :shebang "#!/usr/bin/env bash"
   export PKG_CONFIG_PATH=$(nix-shell -p libgsf pkgconfig mount libselinux libsepol \
                              --run 'echo $PKG_CONFIG_PATH')

   compile_gsf () {
   gxc  -cc-options "`pkg-config --cflags libgsf-1`"\
        -ld-options "`pkg-config --libs libgsf-1`" "$1";
    return 0;
   }

   compile_gsf glib.ss;
   compile_gsf infile.ss;
   compile_gsf input.ss;
   compile_gsf gsf.ss;


 #+end_src

* Documentation

Using it is quite simple so far. There are only *storage*s and *stream*s.

Have a look at the manual in [[./doc/manual.org]] for how it's used. There is also a
lot of test implemented there.

Have a peek at the API reference/literate documentation in [[./api.org]].

* Tests

Another great way to see how it's used is how it's tested. ~./run-test.ss~ is an
executable that is gone over in [[./test/test.org]]/

* Copyright and License

All the code and the literate documentation are

 - (c) Drew Crampsie <me@drewc.ca> ALL RIGHTS RESERVED

Currently distributed under the open [[./LICENSE][MIT]] license.





